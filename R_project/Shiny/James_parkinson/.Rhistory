top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning","ELM","NN","EER");
form_pie_table <- function(dataframe)
{
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], dataframe, fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table$Percentage <- pie_table$Percentage/sum(pie_table$Percentage)
return(pie_table)
}
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
shiny::runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning","ELM","NN","EER");
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
ordered.df
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
View(voice.df)
View(voice.df)
View(voice.df)
View(voice.df)
View(voice.df)
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
View(voice.df)
View(voice.df)
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
print(ordered.df)
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..
top.df <- data.frame(ML, ordered.df[[colnum]])
print("data")
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning","ELM","NN","EER");
form_pie_table <- function(dataframe)
{
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], dataframe, fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table$Percentage <- pie_table$Percentage/sum(pie_table$Percentage)
return(pie_table)
}
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
print(ordered.df)
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..
top.df <- data.frame(ML, ordered.df[[colnum]])
print("data")
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning","ELM","NN","EER");
form_pie_table <- function(dataframe)
{
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], dataframe, fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table$Percentage <- pie_table$Percentage/sum(pie_table$Percentage)
return(pie_table)
}
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
reticulate::repl_python()
shiny::runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
print(ordered.df)
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..
top.df <- data.frame(ML, ordered.df[[colnum]])
print("data")
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning","ELM","NN","EER");
library(shiny)
library(bslib)
library(shinyWidgets)
light <- bs_theme(version = 4, bootswatch = "minty")
dark <- bs_theme(bg = "black", fg = "white", primary = "pink")
#library(markdown)
# Define UI for tab that ana
shinyUI(fluidPage(
theme = light, br(),
# checkboxInput("dark_mode", "Dark mode"),
materialSwitch(inputId = "dark_mode", label = "Night mode"),
tabsetPanel(
tabPanel("Main Page", br(),h2("Parkinson Análisis"),hr(),
h4("Qué es la enfermedad de parkinson ?"),
h5("Es un trastorno neurodegenerativo que afecta al sistema nervioso de manera crónica y progresiva."),
h5("Se caracteriza por la degeneración de neuronas en la sustancia negra,
provocando una falta de dopamina en el organismo y hace que el control del movimiento se vea alterado,
dando lugar a los síntomas motores típicos, como el temblor en reposo o la rigidez."),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/cortex.png?raw=true",
height = 300, width = 1200),
h5("Este proyecto se basa en el documento titulado
'Machine Learning for the diagnosis of Parkinson's disease: A systematic review'
publicado por Jie Mei, Christian Desrosiers y Johannes Frasnelli de la Université de Montréal
dentro del cual se analizan mas de 200 estudios enfocados al diagnostico de la enfermedad
de Parkinson mediante el uso de distintos modelos de Aprendizaje Maquina para diversos tipos
de información del usuario como lo son la voz y el dibujo de patrones"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/paper.png?raw=true",
height = 940, width = 720),
h5("Para cada modelo utilizado para el analisis y diagnostico de la enfermedad utilizado
dentro de cada documento se utilizan distintas metricas de desempeño como lo son:
Exactitud, Presicion, Sensibilidad, etc."),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/outcomes.png?raw=true",
height = 650, width = 950),
h5("Dentro del estudio y analisis de los datos recopilados en las
bases de datos para la deteccion de parkinson por medio del uso de la voz se encuentran los parametros de:
Edad, Sexo, Tiempo de prueba, Motor_UPDRS, Total_UPDRS, Jitter y Shimmer"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/voice.png?raw=true",
height = 530, width = 850),
h5("Para el diagnostico de la enfermedad mediante el uso de los datos recopilados al dibujar patrones se encuentran
los parametros de: Genero, si es diestro o zurdo, Edad, Maxima desviacion
Desviacion minima, Desviacion estandar"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/handwriting.png?raw=true",
height = 350, width = 600),
h4("Bibliografía"),
tags$a(href="https://www.esparkinson.es/espacio-parkinson/conocer-la-enfermedad/", "https://www.esparkinson.es/espacio-parkinson/conocer-la-enfermedad/"),hr(),
tags$a(href="https://arxiv.org/pdf/2010.06101.pdf", "https://arxiv.org/pdf/2010.06101.pdf"),hr(),
tags$a(href="https://www.larescvalenciana.org/abc-del-parkinson/", "https://www.larescvalenciana.org/abc-del-parkinson/"),hr(),
tags$a(href="https://medlineplus.gov/spanish/parkinsonsdisease.html", "https://medlineplus.gov/spanish/parkinsonsdisease.html"),hr(),
tags$a(href="https://conoceelparkinson.org/sintomas/confinamiento-sintomas-enfermedad-parkinson/",
"https://conoceelparkinson.org/sintomas/confinamiento-sintomas-enfermedad-parkinson/"),hr(),
tags$a(href="https://conoceelparkinson.org/cuidados/dia-mundial-parkinson-2021/",
"https://conoceelparkinson.org/cuidados/dia-mundial-parkinson-2021/"),hr(),
tags$a(href="https://www.elsevier.es/es-revista-revista-medica-clinica-las-condes-202-articulo-enfermedad-parkinsonproyecciones-futuras-diagnostico-precoz-X0716864008322080",
"https://www.elsevier.es/es-revista-revista-medica-clinica-las-condes-202-articulo-enfermedad-parkinsonproyecciones-futuras-diagnostico-precoz-X0716864008322080"),hr()
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
View(outcomes_list)
View(outcomes_list)
View(outcomes_list)
shiny::runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
print(ordered.df)
# ML
# ML[ML==""] <- ordered.df$Machine.learning.method.s..
top.df <- data.frame(ML, ordered.df[[colnum]])
print("data")
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning","ELM","NN","EER");
form_pie_table <- function(dataframe)
{
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], dataframe, fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table$Percentage <- pie_table$Percentage/sum(pie_table$Percentage)
return(pie_table)
}
library(shiny)
library(bslib)
library(shinyWidgets)
light <- bs_theme(version = 4, bootswatch = "minty")
dark <- bs_theme(bg = "black", fg = "white", primary = "pink")
#library(markdown)
# Define UI for tab that ana
shinyUI(fluidPage(
theme = light, br(),
# checkboxInput("dark_mode", "Dark mode"),
materialSwitch(inputId = "dark_mode", label = "Night mode"),
tabsetPanel(
tabPanel("Main Page", br(),h2("Parkinson Análisis"),hr(),
h4("Qué es la enfermedad de parkinson ?"),
h5("Es un trastorno neurodegenerativo que afecta al sistema nervioso de manera crónica y progresiva."),
h5("Se caracteriza por la degeneración de neuronas en la sustancia negra,
provocando una falta de dopamina en el organismo y hace que el control del movimiento se vea alterado,
dando lugar a los síntomas motores típicos, como el temblor en reposo o la rigidez."),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/cortex.png?raw=true",
height = 300, width = 1200),
h5("Este proyecto se basa en el documento titulado
'Machine Learning for the diagnosis of Parkinson's disease: A systematic review'
publicado por Jie Mei, Christian Desrosiers y Johannes Frasnelli de la Université de Montréal
dentro del cual se analizan mas de 200 estudios enfocados al diagnostico de la enfermedad
de Parkinson mediante el uso de distintos modelos de Aprendizaje Maquina para diversos tipos
de información del usuario como lo son la voz y el dibujo de patrones"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/paper.png?raw=true",
height = 940, width = 720),
h5("Para cada modelo utilizado para el analisis y diagnostico de la enfermedad utilizado
dentro de cada documento se utilizan distintas metricas de desempeño como lo son:
Exactitud, Presicion, Sensibilidad, etc."),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/outcomes.png?raw=true",
height = 650, width = 950),
h5("Dentro del estudio y analisis de los datos recopilados en las
bases de datos para la deteccion de parkinson por medio del uso de la voz se encuentran los parametros de:
Edad, Sexo, Tiempo de prueba, Motor_UPDRS, Total_UPDRS, Jitter y Shimmer"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/voice.png?raw=true",
height = 530, width = 850),
h5("Para el diagnostico de la enfermedad mediante el uso de los datos recopilados al dibujar patrones se encuentran
los parametros de: Genero, si es diestro o zurdo, Edad, Maxima desviacion
Desviacion minima, Desviacion estandar"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/handwriting.png?raw=true",
height = 350, width = 600),
h4("Bibliografía"),
tags$a(href="https://www.esparkinson.es/espacio-parkinson/conocer-la-enfermedad/", "https://www.esparkinson.es/espacio-parkinson/conocer-la-enfermedad/"),hr(),
tags$a(href="https://arxiv.org/pdf/2010.06101.pdf", "https://arxiv.org/pdf/2010.06101.pdf"),hr(),
tags$a(href="https://www.larescvalenciana.org/abc-del-parkinson/", "https://www.larescvalenciana.org/abc-del-parkinson/"),hr(),
tags$a(href="https://medlineplus.gov/spanish/parkinsonsdisease.html", "https://medlineplus.gov/spanish/parkinsonsdisease.html"),hr(),
tags$a(href="https://conoceelparkinson.org/sintomas/confinamiento-sintomas-enfermedad-parkinson/",
"https://conoceelparkinson.org/sintomas/confinamiento-sintomas-enfermedad-parkinson/"),hr(),
tags$a(href="https://conoceelparkinson.org/cuidados/dia-mundial-parkinson-2021/",
"https://conoceelparkinson.org/cuidados/dia-mundial-parkinson-2021/"),hr(),
tags$a(href="https://www.elsevier.es/es-revista-revista-medica-clinica-las-condes-202-articulo-enfermedad-parkinsonproyecciones-futuras-diagnostico-precoz-X0716864008322080",
"https://www.elsevier.es/es-revista-revista-medica-clinica-las-condes-202-articulo-enfermedad-parkinsonproyecciones-futuras-diagnostico-precoz-X0716864008322080"),hr()
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
#library(markdown)
# Define UI for tab that ana
shinyUI(fluidPage(
theme = light, br(),
# checkboxInput("dark_mode", "Dark mode"),
materialSwitch(inputId = "dark_mode", label = "Night mode"),
tabsetPanel(
tabPanel("Main Page", br(),h2("Parkinson Análisis"),hr(),
h4("Qué es la enfermedad de parkinson ?"),
h5("Es un trastorno neurodegenerativo que afecta al sistema nervioso de manera crónica y progresiva."),
h5("Se caracteriza por la degeneración de neuronas en la sustancia negra,
provocando una falta de dopamina en el organismo y hace que el control del movimiento se vea alterado,
dando lugar a los síntomas motores típicos, como el temblor en reposo o la rigidez."),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/cortex.png?raw=true",
height = 300, width = 1200),
h5("Este proyecto se basa en el documento titulado
'Machine Learning for the diagnosis of Parkinson's disease: A systematic review'
publicado por Jie Mei, Christian Desrosiers y Johannes Frasnelli de la Université de Montréal
dentro del cual se analizan mas de 200 estudios enfocados al diagnostico de la enfermedad
de Parkinson mediante el uso de distintos modelos de Aprendizaje Maquina para diversos tipos
de información del usuario como lo son la voz y el dibujo de patrones"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/paper.png?raw=true",
height = 940, width = 720),
h5("Para cada modelo utilizado para el analisis y diagnostico de la enfermedad utilizado
dentro de cada documento se utilizan distintas metricas de desempeño como lo son:
Exactitud, Presicion, Sensibilidad, etc."),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/outcomes.png?raw=true",
height = 650, width = 950),
h5("Dentro del estudio y analisis de los datos recopilados en las
bases de datos para la deteccion de parkinson por medio del uso de la voz se encuentran los parametros de:
Edad, Sexo, Tiempo de prueba, Motor_UPDRS, Total_UPDRS, Jitter y Shimmer"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/voice.png?raw=true",
height = 530, width = 850),
h5("Para el diagnostico de la enfermedad mediante el uso de los datos recopilados al dibujar patrones se encuentran
los parametros de: Genero, si es diestro o zurdo, Edad, Maxima desviacion
Desviacion minima, Desviacion estandar"),
img(src = "https://github.com/eecastillo/parkinson_analisis/blob/master/R_project/Shiny/files/handwriting.png?raw=true",
height = 350, width = 600),
h4("Bibliografía"),
tags$a(href="https://www.esparkinson.es/espacio-parkinson/conocer-la-enfermedad/", "https://www.esparkinson.es/espacio-parkinson/conocer-la-enfermedad/"),hr(),
tags$a(href="https://arxiv.org/pdf/2010.06101.pdf", "https://arxiv.org/pdf/2010.06101.pdf"),hr(),
tags$a(href="https://www.larescvalenciana.org/abc-del-parkinson/", "https://www.larescvalenciana.org/abc-del-parkinson/"),hr(),
tags$a(href="https://medlineplus.gov/spanish/parkinsonsdisease.html", "https://medlineplus.gov/spanish/parkinsonsdisease.html"),hr(),
tags$a(href="https://conoceelparkinson.org/sintomas/confinamiento-sintomas-enfermedad-parkinson/",
"https://conoceelparkinson.org/sintomas/confinamiento-sintomas-enfermedad-parkinson/"),hr(),
tags$a(href="https://conoceelparkinson.org/cuidados/dia-mundial-parkinson-2021/",
"https://conoceelparkinson.org/cuidados/dia-mundial-parkinson-2021/"),hr(),
tags$a(href="https://www.elsevier.es/es-revista-revista-medica-clinica-las-condes-202-articulo-enfermedad-parkinsonproyecciones-futuras-diagnostico-precoz-X0716864008322080",
"https://www.elsevier.es/es-revista-revista-medica-clinica-las-condes-202-articulo-enfermedad-parkinsonproyecciones-futuras-diagnostico-precoz-X0716864008322080"),hr()
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('dev/data_analysis/project/R_project/Shiny/James_parkinson')
