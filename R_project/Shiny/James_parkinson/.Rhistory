top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(voice.df[colnum])))
return(top.df)
}
top_ordered_query <- function(rownum,colnum)
{
ordered.df <- ordered_query(colnum)
ML <- ordered.df$ML
ML
ML[ML==""] <- "5"#ordered.df$Machine.learning.method.s..[is.na(ML)]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(voice.df[colnum])))
return(top.df)
}
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
# Name it
names(outcomes_list) <- choices$var
ordered_query <- function(colnum, ascending){
newdata <- voice.df[!is.na(voice.df[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(rownum,colnum)
{
ordered.df <- ordered_query(colnum,FALSE)
ML <- ordered.df$ML
ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(voice.df[colnum])))
return(top.df)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
# Name it
names(outcomes_list) <- choices$var
ordered_query <- function(colnum, ascending){
newdata <- voice.df[!is.na(voice.df[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(rownum,colnum)
{
ordered.df <- ordered_query(colnum,FALSE)
ML <- ordered.df$ML
ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(voice.df[colnum])))
return(top.df)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
hand <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
View(hand)
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
hand <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
total_splited <- str_split_fixed(hand$Number.of.subjects..n., "; ", 2)
subject_total <- total_splited[,1]
subject_total <- gsub(",","",subject_total)
hand$subject_total <- as.numeric(subject_total)
total_splited
hand <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand <- hand[1:nrow(hand)-1,]
total_splited <- str_split_fixed(hand$Number.of.subjects..n., "; ", 2)
subject_total <- total_splited[,1]
subject_total <- gsub(",","",subject_total)
total_splited
hand$subject_total
subject_total
hand$subject_total <- as.numeric(subject_total)
hand$subject_total
hc_split <- str_split_fixed(total_splited[,2]," HC \\+ ",2)
hc_split
HC_subjects <- as.numeric(gsub(",","",hc_split[,1]))
hand$HC_subjects <- HC_subjects
hand$HC_subjects
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
hc_split
hand <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand <- hand[1:nrow(hand)-1,]
total_splited <- str_split_fixed(hand$Number.of.subjects..n., "; ", 2)
subject_total <- total_splited[,1]
subject_total <- gsub(",","",subject_total)
hand$subject_total <- as.numeric(subject_total)
hc_split <- str_split_fixed(total_splited[,2]," HC \\+ ",2)
HC_subjects <- as.numeric(gsub(",","",hc_split[,1]))
hand$HC_subjects <- HC_subjects
hand$HC_subjects
hc_split
pd_split <- str_split_fixed(hc_split[,2]," PD ",2)
PD_subjects <- as.numeric(gsub(" PD","",pd_split[,1]))
PD_subjects[is.na(PD_subjects)] <- 0
hand$PD_subjects <-PD_subjects
hand$PD_subjects
pd_split[,2] <- substring(pd_split[,2], 3)
pd_split
msa_split <- str_split_fixed(pd_split[,2]," MSA \\+ ",2)
msa_split
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
# Name it
names(outcomes_list) <- choices$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
# Name it
names(outcomes_list) <- choices$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
install.packages("markdown")
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
names(outcomes_hdwr_list) <- choices_hdwr$var
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/cvs_data/handwriting_paper.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
View(voice.df)
View(voice.df)
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning");
grepl("SVM", voice.df$Machine.learning.method.s.., fixed = TRUE)
grepl("SVM", voice.df$Machine.learning.method.s.., fixed = TRUE)
grepl(ML_methods, voice.df$Machine.learning.method.s.., fixed = TRUE)
grepl("PNN", voice.df$Machine.learning.method.s.., fixed = TRUE)
count <- grepl("PNN", voice.df$Machine.learning.method.s.., fixed = TRUE)
sum(count, na.rm = TRUE)
count <- grepl("DNN", voice.df$Machine.learning.method.s.., fixed = TRUE)
sum(count, na.rm = TRUE)
for(i in 1:length(ML_methods)){
pie_table$as.formula(ML_methods[i])
}
pie_table <- data.frame(matrix(nrow = length(ML_methods),ncol = (2)))
for(i in 1:length(ML_methods)){
pie_table$as.formula(ML_methods[i])
}
for(i in 1:length(ML_methods)){
#pie_table$as.formula(ML_methods[i])
ML_methods[i]
}
for(i in 1:length(ML_methods)){
pie_table[[as.formula(ML_methods[i])]]
ML_methods[i]
}
pie_table <- data.frame(matrix(row(ML_methods),ncol = (2)))
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=10))
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
str(pie_table)
pie_table[[i]]
ML_methods[i]
pie_table[i,1]
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], voice.df$Machine.learning.method.s.., fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)
}
pie_table
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], voice.df$Machine.learning.method.s.., fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)/length(voice.df$Machine.learning.method.s..)
}
pie_table
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], voice.df$Machine.learning.method.s.., fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)#/length(voice.df$Machine.learning.method.s..)
}
pie_table
colnames(pie_table) <- c("ML_method","Percentage")
pie_table
pie_table <- pie_table[which(pie_table$Percentage!=0)]
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], voice.df$Machine.learning.method.s.., fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)#/length(voice.df$Machine.learning.method.s..)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], voice.df$Machine.learning.method.s.., fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)#/length(voice.df$Machine.learning.method.s..)
}
pie_table
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table
pie_table$Percentage <- pie_table$Percentage/nrow(voice.df$Machine.learning.method.s..)
pie_table$Percentage <- pie_table$Percentage/20
pie_table$Percentage
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], voice.df$Machine.learning.method.s.., fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)#/length(voice.df$Machine.learning.method.s..)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table$Percentage <- pie_table$Percentage/sum(pie_table$Percentage)
pie_table
plot_ly(pie_table, labels = pie_table$ML_method, values = pie_table$Percentage, type = 'pie')
plot_ly(pie_table, labels = ~pie_table$ML_method, values = ~pie_table$Percentage, type = 'pie')
plot_ly(pie_table, labels = pie_table$ML_method, values = pie_table$Percentage, type = 'pie')%>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(shiny)
library(stringr)
library(plotly)
#retreive csv
voice_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_voice.csv")
voice.df <- data.frame(voice_csv,stringsAsFactors = FALSE)
hand_csv <- read.csv("https://raw.githubusercontent.com/eecastillo/parkinson_analisis/master/R_project/Shiny/files/clean_handwriting.csv",sep = "|")
hand.df <- data.frame(hand_csv, stringsAsFactors = FALSE)
choices = data.frame(
var = colnames(voice.df[8:31]),
num = 1:24
)
choices_hdwr = data.frame(
var = colnames(hand.df[8:19]),
num = 1:12
)
# List of choices for selectInput
outcomes_list <- as.list(choices$num)
outcomes_hdwr_list <- as.list(choices_hdwr$num)
# Name it
names(outcomes_list) <- choices$var
names(outcomes_hdwr_list) <- choices_hdwr$var
ordered_query <- function(dataframe, colnum, ascending){
newdata <- dataframe[!is.na(dataframe[[colnum]]),]
if(ascending == TRUE)
{
#Ascending
acc <- newdata[order(newdata[[colnum]]),]
}else{
#Descending
acc <- newdata[order(-newdata[[colnum]]),]
}
return(acc)
}
top_ordered_query <- function(dataframe,rownum,colnum)
{
ordered.df <- ordered_query(dataframe,colnum,FALSE)
ML <- ordered.df$ML
# ML
ML[ML==""] <- ordered.df$Machine.learning.method.s..[ML==""]
top.df <- data.frame(ML, ordered.df[[colnum]])
if(nrow(top.df)>rownum){
top.df <- top.df[1:rownum,]
}
colnames(top.df) <- c("ML method(s)",as.character(colnames(dataframe[colnum])))
return(top.df)
}
ML_methods <- c("cross validation", "LS-SVM", "PNN", "SVM-RBF","SVM-linear","SCFW-KELM","SVM","FKNN",
"ECFA-SVM","DNN","SMO","Pegasos","AdaBoost","FBANN","rotation forest","NNge",
"logistic regression","KNN","naïve Bayes","decision tree","random forest","CNN",
"LSSVM-RBF","MLP","joint learning");
form_pie_table <- function(dataframe)
{
pie_table <- data.frame(ML_methods,vector(mode="numeric", length=length(ML_methods)))
colnames(pie_table) <- c("ML_method","Percentage")
for(i in 1:length(ML_methods)){
count <- grepl(pie_table[i,1], dataframe, fixed = TRUE)
pie_table[i,2]<- sum(count, na.rm = TRUE)
}
pie_table <- pie_table[which(pie_table$Percentage!=0),]
pie_table$Percentage <- pie_table$Percentage/sum(pie_table$Percentage)
return(pie_table)
}
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
runApp('~/dev/data_analysis/project/R_project/Shiny/James_parkinson')
